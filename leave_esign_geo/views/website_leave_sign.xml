<odoo>
  <template id="leave_sign_template" name="Leave Sign Page">
    <t t-call="website.layout">
      <div class="container mt-5">
        <h3>๐ ุทูุจ ุฅุฌุงุฒุฉ: <t t-esc="rec.name"/></h3>
        <p><strong>๐ค ุงูููุธู:</strong> <t t-esc="rec.employee_name"/></p>
        <p><strong>๐ง ุงูุจุฑูุฏ:</strong> <t t-esc="rec.employee_email"/></p>
        <p><strong>๐ ูู:</strong> <t t-esc="rec.date_from"/></p>
        <p><strong>๐ ุฅูู:</strong> <t t-esc="rec.date_to"/></p>
        <p><strong>๐ ุงูุณุจุจ:</strong> <t t-esc="rec.reason"/></p>

        <h5>โ๏ธ ุงูุชูููุน</h5>
        <canvas id="signature-pad" width="700" height="300"
                style="border: 2px solid #333; background: #fff; width: 100%; height: auto;"></canvas>
        <div class="mt-2">
          <button id="clear-sign" class="btn btn-secondary">๐๏ธ ุญุฐู ุงูุชูููุน</button>
          <button id="submit-sign" class="btn btn-primary">โ ุชุฃููุฏ ูุฅุฑุณุงู</button>
        </div>
        <div id="location-status" class="mt-2 alert alert-info" style="display:none;">
          ๐ ุฌุงุฑู ุงูุญุตูู ุนูู ุงููููุน...
        </div>
        <div id="sign-status" class="mt-2"></div>

        <input type="hidden" id="leave-token" t-att-value="rec.token"/>

        <script type="text/javascript">
        <![CDATA[
        (function() {
            'use strict';
            function initSignature() {
                const canvas = document.getElementById('signature-pad');
                const ctx = canvas.getContext('2d');
                canvas.width = canvas.offsetWidth * window.devicePixelRatio;
                canvas.height = canvas.offsetHeight * window.devicePixelRatio;
                ctx.scale(window.devicePixelRatio, window.devicePixelRatio);
                ctx.strokeStyle = '#000';
                ctx.lineWidth = 2;
                ctx.lineCap = 'round';
                ctx.lineJoin = 'round';
                ctx.fillStyle = '#fff';
                ctx.fillRect(0, 0, canvas.offsetWidth, canvas.offsetHeight);

                let isDrawing = false;
                function getPos(e) {
                    const rect = canvas.getBoundingClientRect();
                    if(e.touches) { e = e.touches[0]; }
                    return { x: e.clientX - rect.left, y: e.clientY - rect.top };
                }
                canvas.addEventListener('mousedown', e => { isDrawing=true; const pos=getPos(e); ctx.beginPath(); ctx.moveTo(pos.x,pos.y); });
                canvas.addEventListener('mousemove', e => { if(!isDrawing) return; const pos=getPos(e); ctx.lineTo(pos.x,pos.y); ctx.stroke(); });
                canvas.addEventListener('mouseup', e => { isDrawing=false; ctx.closePath(); });
                canvas.addEventListener('mouseleave', e => { isDrawing=false; ctx.closePath(); });
                canvas.addEventListener('touchstart', e => { isDrawing=true; const pos=getPos(e); ctx.beginPath(); ctx.moveTo(pos.x,pos.y); });
                canvas.addEventListener('touchmove', e => { if(!isDrawing) return; const pos=getPos(e); ctx.lineTo(pos.x,pos.y); ctx.stroke(); });
                canvas.addEventListener('touchend', e => { isDrawing=false; ctx.closePath(); });

                document.getElementById('clear-sign').onclick = () => {
                    ctx.fillStyle = '#fff';
                    ctx.fillRect(0,0,canvas.offsetWidth,canvas.offsetHeight);
                };

                document.getElementById('submit-sign').onclick = () => {
                    const statusDiv = document.getElementById('sign-status');
                    const token = document.getElementById('leave-token').value;
                    if(!token) {
                        statusDiv.innerHTML='โ ุฎุทุฃ: ุชููู ููููุฏ';
                        return;
                    }
                    const imageData = canvas.toDataURL('image/png');

                    const sendSig = (lat, lon) => {
                        console.log('Sending signature with location:', lat, lon);
                        statusDiv.innerHTML='โณ ุฌุงุฑู ุฅุฑุณุงู ุงูุชูููุน...';

                        fetch('/leave/sign/submit', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'X-Requested-With': 'XMLHttpRequest'
                            },
                            body: JSON.stringify({
                                jsonrpc: '2.0',
                                method: 'call',
                                params: {
                                    token: token,
                                    signature_data: imageData,
                                    lat: lat !== null && lat !== undefined ? lat : '',
                                    lon: lon !== null && lon !== undefined ? lon : ''
                                }
                            })
                        })
                        .then(response => {
                            console.log('Response status:', response.status);
                            return response.text();
                        })
                        .then(text => {
                            console.log('Response text:', text);
                            try {
                                const data = JSON.parse(text);
                                console.log('Parsed data:', data);

                                // Handle JSONRPC response format
                                if (data.result) {
                                    if (data.result.success) {
                                        statusDiv.innerHTML = 'โ ุชู ุงูุชูููุน ุจูุฌุงุญ!';
                                        statusDiv.className = 'mt-2 alert alert-success';
                                    } else {
                                        statusDiv.innerHTML = 'โ ุฎุทุฃ: ' + (data.result.error || 'ุฎุทุฃ ุบูุฑ ูุนุฑูู');
                                        statusDiv.className = 'mt-2 alert alert-danger';
                                    }
                                } else if (data.error) {
                                    statusDiv.innerHTML = 'โ ุฎุทุฃ ูู ุงูุฎุงุฏู: ' + JSON.stringify(data.error);
                                    statusDiv.className = 'mt-2 alert alert-danger';
                                } else {
                                    statusDiv.innerHTML = 'โ ุงุณุชุฌุงุจุฉ ุบูุฑ ูุชููุนุฉ: ' + text;
                                    statusDiv.className = 'mt-2 alert alert-warning';
                                }
                            } catch (e) {
                                console.error('JSON parse error:', e);
                                statusDiv.innerHTML = 'โ ุฎุทุฃ ูู ูุนุงูุฌุฉ ุงูุงุณุชุฌุงุจุฉ: ' + text;
                                statusDiv.className = 'mt-2 alert alert-danger';
                            }
                        })
                        .catch(err => {
                            console.error('Fetch error:', err);
                            statusDiv.innerHTML = 'โ ุฎุทุฃ ูู ุงูุงุชุตุงู: ' + err.message;
                            statusDiv.className = 'mt-2 alert alert-danger';
                        });
                    };

                    if(navigator.geolocation){
                        console.log('Getting geolocation...');
                        navigator.geolocation.getCurrentPosition(
                            p => {
                                console.log('Geolocation success:', p.coords.latitude, p.coords.longitude);
                                sendSig(p.coords.latitude, p.coords.longitude);
                            },
                            e => {
                                console.warn('Geolocation error:', e.message);
                                sendSig('', '');
                            },
                            {
                                enableHighAccuracy: true,
                                timeout: 10000,
                                maximumAge: 0
                            }
                        );
                    } else {
                        console.warn('Geolocation not supported');
                        sendSig('', '');
                    }
                };
            }
            if(document.readyState==='loading'){
                document.addEventListener('DOMContentLoaded', initSignature);
            } else {
                initSignature();
            }
        })();
        ]]>
        </script>
      </div>
    </t>
  </template>

  <template id="leave_sign_not_found" name="Not Found">
    <t t-call="website.layout">
      <div class="container mt-5">
        <h3>โ ุงูุฑุงุจุท ุบูุฑ ุตุญูุญ ุฃู ููุชูู ุงูุตูุงุญูุฉ</h3>
      </div>
    </t>
  </template>
</odoo>